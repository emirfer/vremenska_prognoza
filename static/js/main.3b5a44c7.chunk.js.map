{"version":3,"sources":["components/CitySelector.js","components/WeatherCard.js","components/WeatherList.js","hooks/UseFetch.js","App.js","config/index.js","index.js"],"names":["CitySelector","onSelectButtonClick","useState","city","setCity","Row","Col","md","FormControl","style","width","placeholder","onChange","e","target","value","Button","variant","onClick","WeatherCard","dt","min","max","description","humidity","icon","date","Date","Card","Img","src","Body","Title","getDate","getMonth","getFullYear","WeatherList","weathers","map","index","main","weather","xs","key","temp_min","temp_max","className","UseFetch","initialUrl","data","setData","err","setErr","inProgress","setInProgress","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","App","Container","color","list","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b5a44c7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Row, Col, FormControl, Button } from 'react-bootstrap';\r\n\r\nconst CitySelector = ({onSelectButtonClick}) => {\r\n    const [city, setCity] = useState(null)\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col>\r\n                    <h6>EmirFer, React hooks</h6>\r\n                    <h1>Interesuje vas vremenska prognoza?</h1>   \r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"auto\">\r\n                    <FormControl\r\n                        style={{width: 300}}\r\n                        placeholder='Unesite ime grada'\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Button variant=\"info\" onClick={() => onSelectButtonClick(city)}>Klikni me :)</Button>\r\n                </Col>    \r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CitySelector;\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst WeatherCard = ({dt, min, max, description, humidity, icon}) => {\r\n    const date = new Date(dt);\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <Card.Img variant=\"top\" src={`https://openweathermap.org/img/wn/${icon}@2x.png`} />\r\n                <Card.Body>\r\n                    <Card.Title>{description}</Card.Title>\r\n                    <p>{date.getDate()}/{date.getMonth() + 1}/{date.getFullYear()} </p>\r\n                    <p>Min: {min}</p>\r\n                    <p>Maks: {max}</p>\r\n                    <p>Vlažnost: {humidity}</p>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React from 'react';\r\nimport WeatherCard from './WeatherCard';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport '../App.css';\r\n\r\nconst WeatherList = ({weathers}) => {\r\n    return (\r\n        <Row>\r\n            {weathers.map(({dt, main, weather}, index) => (\r\n                <Col xs={8} md={2} key={index}>\r\n                    <WeatherCard \r\n                      description={weather[0].description}\r\n                      min={main.temp_min}\r\n                      max={main.temp_max}\r\n                      humidity={main.humidity}\r\n                      dt={dt * 1000}\r\n                      main={weather[0].main}\r\n                      icon={weather[0].icon}\r\n                      className=\"card\"\r\n                    />\r\n                </Col>\r\n            ))}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default WeatherList;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst UseFetch = (initialUrl) => {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [err, setErr] = useState(null);\r\n    const [inProgress, setInProgress] = useState(false);\r\n    const [url, setUrl] = useState(initialUrl);\r\n\r\n    useEffect(() => {\r\n        if(!url) return\r\n        setInProgress(true);\r\n        setData(null);\r\n        setErr(null);\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            setInProgress(false);\r\n            if(data.cod >= 400){\r\n                setErr(data.message);\r\n                return\r\n            }\r\n            setData(data);\r\n        })\r\n        .catch(err => {\r\n            setInProgress(false);\r\n            setErr(err);\r\n        });\r\n    }, [url]);\r\n\r\n    return {\r\n        data,\r\n        inProgress,\r\n        err,\r\n        setUrl\r\n    }\r\n}\r\n\r\nexport default UseFetch;\r\n","import React from 'react';\nimport CitySelector from './components/CitySelector';\nimport WeatherList from './components/WeatherList';\nimport UseFetch from './hooks/UseFetch';\nimport { baseUrl, apiKey } from './config';\nimport { Container } from 'react-bootstrap';\nimport './App.css';\n\nfunction App() {\n  const {data, inProgress, err, setUrl} = UseFetch();\n\n  const getContent = () => {\n    if(err === 'Nothing to geocode' ) return <h2 style={{color:'red'}}>Greška: niste ništa unijeli za pretragu!</h2>\n    if(err === 'city not found' ) return <h2 style={{color:'red'}}>Greška: unešeni grad ne postoji!</h2>\n    if(!data && inProgress) return <h1>Loading...</h1>\n    if(!data) return null\n    return <WeatherList weathers={data.list}/>\n  };\n\n  return (\n    <Container className='App'>\n      <CitySelector onSelectButtonClick={city => \n        setUrl(`${baseUrl}/data/2.5/forecast?q=${city}&cnt=5&lang=hr&units=metric&appid=${apiKey}`)}\n      />\n      {getContent()}\n    </Container>\n  );\n}\n\nexport default App;\n","export const apiKey = \"65c09a6c3a99c8a0012e6a1ac3daa486\";\r\nexport const baseUrl = \"https://api.openweathermap.org/\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}